{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","incorrectFileType","setIncorrectFileType","selectedFile","setSelectedFile","convertedFile","setConvertedFile","onDrop","useCallback","acceptedFiles","type","useDropzone","getRootProps","getInputProps","isDragActive","className","style","marginBottom","backgroundColor","color","marginTop","name","onClick","data","FormData","append","axios","post","then","response","catch","error","console","filename","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uRAqEeA,MA/Df,WAAgB,IAAD,EACqCC,oBAAS,GAD9C,mBACNC,EADM,KACaC,EADb,OAE2BF,mBAAS,MAFpC,mBAENG,EAFM,KAEQC,EAFR,OAG6BJ,mBAAS,IAHtC,mBAGNK,EAHM,KAGSC,EAHT,KAKPC,EAASC,uBAAY,SAAAC,GACK,6BAA1BA,EAAc,GAAGC,KACnBR,GAAqB,IAGrBE,EAAgBK,EAAc,IAC9BP,GAAqB,MAEtB,IAbU,EAcuCS,YAAY,CAACJ,WAA1DK,EAdM,EAcNA,aAAcC,EAdR,EAcQA,cAAeC,EAdvB,EAcuBA,aAkBpC,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAEdd,EACE,kEAEA,yCAEJ,2BAAOe,MAAO,CAACC,aAAc,SAA7B,oBACA,yCAASL,IAAT,CAAyBI,MAAO,CAACE,gBAAiB,aAChD,0BAAWL,KAETC,EACE,uBAAGE,MAAO,CAACG,MAAO,YAAlB,2BACA,uBAAGH,MAAO,CAACG,MAAO,YAAlB,4DAGN,4BAAQH,MAAO,CAACI,UAAW,QAASV,KAAK,SAASW,KAAK,SAASC,QAlC9C,WACtB,GAAInB,IAAiBF,EAAmB,CACtC,IAAMsB,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQtB,GAEpBuB,IAAMC,KAAK,mDAAoDJ,EAAM,IACpEK,MAAK,SAACC,GAELvB,EAAiBuB,EAASN,SAE3BO,OAAM,SAACC,GACNC,QAAQD,MAAMA,SAuBd,UAGoB,KAAlB1B,GACA,kBAAC,UAAD,CAASkB,KAAMlB,EAAe4B,SAAU9B,EAAakB,MAArD,kBChDUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMkB,c","file":"static/js/main.167bdea0.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport {useDropzone} from 'react-dropzone'\nimport {CSVLink} from 'react-csv'\n\nfunction App() {\n  const [incorrectFileType, setIncorrectFileType] = useState(false)\n  const [selectedFile, setSelectedFile] = useState(null)\n  const [convertedFile, setConvertedFile] = useState('')\n\n  const onDrop = useCallback(acceptedFiles => {\n    if (acceptedFiles[0].type !== 'application/vnd.ms-excel') {\n      setIncorrectFileType(true)\n    }\n    else {\n      setSelectedFile(acceptedFiles[0])\n      setIncorrectFileType(false)\n    }\n  }, [])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  const onSubmitClicked = () => {\n    if (selectedFile && !incorrectFileType) {\n      const data = new FormData()\n      data.append('file', selectedFile)\n      // console.log(selectedFile)\n      axios.post('https://param-csv-converter.herokuapp.com/upload', data, {})\n      .then((response) => {\n        // console.log(response)\n        setConvertedFile(response.data)\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {\n          incorrectFileType ? \n            <label> Incorrect File type submitted </label> \n            : \n            <> </>\n        }\n        <label style={{marginBottom: '30px'}}>Upload your file</label>\n        <div {...getRootProps()} style={{backgroundColor: '#a1a1a1'}}>\n          <input {...getInputProps()}/>\n          {\n            isDragActive ?\n              <p style={{color: '#000000'}}>Drop the files here ...</p> :\n              <p style={{color: '#000000'}}>Drag 'n' drop some files here, or click to select files</p>\n          }\n        </div>\n        <button style={{marginTop: '20px'}} type=\"button\" name=\"submit\" onClick={onSubmitClicked}>Submit</button>\n        \n        {\n          convertedFile !== '' && \n          <CSVLink data={convertedFile} filename={selectedFile.name} >\n            Download Me\n          </CSVLink>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}